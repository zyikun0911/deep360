version: '3.8'

services:
  # 生产环境应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: deep360-app-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/deep360_prod
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - LOG_LEVEL=info
    depends_on:
      - mongodb
      - redis
    networks:
      - deep360-network
    volumes:
      - app-logs:/app/logs
      - app-uploads:/app/uploads
      - app-plugins:/app/plugins
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # MongoDB 生产环境
  mongodb:
    image: mongo:6.0
    container_name: deep360-mongodb-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=deep360_prod
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - deep360-network
    command: mongod --auth --bind_ip_all --replSet rs0
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis 生产环境
  redis:
    image: redis:7.0-alpine
    container_name: deep360-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - deep360-network
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx 反向代理
  nginx:
    image: nginx:1.24-alpine
    container_name: deep360-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/:/etc/nginx/conf.d/:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - deep360-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: deep360-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - deep360-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana 仪表盘
  grafana:
    image: grafana/grafana:latest
    container_name: deep360-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/:/etc/grafana/provisioning/:ro
    networks:
      - deep360-network
    depends_on:
      - prometheus

  # 日志聚合 (ELK Stack)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: deep360-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - deep360-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: deep360-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - deep360-network
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: deep360-logstash
    restart: unless-stopped
    volumes:
      - ./config/logstash/:/usr/share/logstash/pipeline/:ro
      - app-logs:/app/logs:ro
    networks:
      - deep360-network
    depends_on:
      - elasticsearch

  # 备份服务
  backup:
    image: alpine:latest
    container_name: deep360-backup
    restart: "no"
    volumes:
      - mongodb-data:/backup/mongodb:ro
      - redis-data:/backup/redis:ro
      - app-uploads:/backup/uploads:ro
      - backup-storage:/backup/storage
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - deep360-network
    command: /bin/sh -c "chmod +x /backup.sh && crond -f"
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # 每天凌晨 2 点备份

  # 健康检查服务
  healthcheck:
    image: alpine:latest
    container_name: deep360-healthcheck
    restart: unless-stopped
    volumes:
      - ./scripts/healthcheck.sh:/healthcheck.sh:ro
    networks:
      - deep360-network
    command: /bin/sh -c "chmod +x /healthcheck.sh && while true; do /healthcheck.sh; sleep 60; done"
    depends_on:
      - app
      - mongodb
      - redis

# 网络配置
networks:
  deep360-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  app-uploads:
    driver: local
  app-plugins:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  backup-storage:
    driver: local