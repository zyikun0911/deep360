version: '3.8'

services:
  # 主应用服务
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/deep360
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - OPENAI_API_KEY=your-openai-api-key
    depends_on:
      - mongo
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - deep360-network

  # MongoDB 数据库
  mongo:
    image: mongo:6.0
    restart: always
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: deep360
    networks:
      - deep360-network

  # Redis 缓存和任务队列
  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - deep360-network

  # WhatsApp 实例容器模板
  whatsapp-instance:
    build:
      context: .
      dockerfile: Dockerfile.whatsapp
    environment:
      - INSTANCE_TYPE=whatsapp
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    volumes:
      - whatsapp_sessions:/app/sessions
    networks:
      - deep360-network
    deploy:
      replicas: 0  # 动态创建

  # Telegram 实例容器模板  
  telegram-instance:
    build:
      context: .
      dockerfile: Dockerfile.telegram
    environment:
      - INSTANCE_TYPE=telegram
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    volumes:
      - telegram_sessions:/app/sessions
    networks:
      - deep360-network
    deploy:
      replicas: 0  # 动态创建

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - deep360-network

volumes:
  mongo_data:
  redis_data:
  whatsapp_sessions:
  telegram_sessions:

networks:
  deep360-network:
    driver: bridge